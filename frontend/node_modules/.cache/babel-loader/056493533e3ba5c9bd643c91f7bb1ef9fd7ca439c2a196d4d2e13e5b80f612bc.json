{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\LENOVO\\\\Desktop\\\\Django React Projects\\\\dop\\\\frontend\\\\src\\\\components\\\\Dashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { Chart as ChartJS, registerables } from \"chart.js\";\nimport { Bar, Line } from \"react-chartjs-2\";\nimport { Container, Typography, Grid, Paper, CircularProgress, Select, MenuItem } from \"@mui/material\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(...registerables);\nconst Dashboard = () => {\n  _s();\n  const [loading, setLoading] = useState(true);\n  const [billData, setBillData] = useState([]);\n  const [quarterMetricData, setQuarterMetricData] = useState([]);\n  const [monthMetricData, setMonthMetricData] = useState([]);\n  const [selectedQuarter, setSelectedQuarter] = useState(\"\");\n  const [selectedQuarterAvgCharge, setSelectedQuarterAvgCharge] = useState(\"\");\n  useEffect(() => {\n    fetchData();\n  }, []);\n  const fetchData = async () => {\n    try {\n      const response = await axios.get(\"/api/get_data\");\n      const data = response.data;\n      setBillData(data.bill_data);\n      setQuarterMetricData(data.quarter_metric_data);\n      setMonthMetricData(data.month_metric_data);\n      setLoading(false);\n      console.log(\"Data successfully fetched: \", data);\n    } catch (error) {\n      console.error(\"Error fetching data:\", error);\n    }\n  };\n  const handleQuarterChange = event => {\n    const selectedQuarterId = event.target.value;\n    const selectedQuarterData = quarterMetricData.find(quarter => quarter.Quarter_ID === selectedQuarterId);\n    setSelectedQuarter(selectedQuarterId);\n    setSelectedQuarterAvgCharge(selectedQuarterData ? selectedQuarterData.Avg_Charge : \"\");\n  };\n  const topQuarters = quarterMetricData.slice(0, 11);\n  const lineChartData1 = {\n    labels: monthMetricData.map(item => item.Month),\n    datasets: [{\n      label: \"Total Charge\",\n      data: monthMetricData.map(item => item.Total_Charge),\n      borderColor: \"rgba(75, 192, 192, 1)\",\n      // Adjust border color for better visibility in dark mode\n      backgroundColor: \"rgba(75, 192, 192, 0.2)\",\n      // Adjust background color for better visibility in dark mode\n      pointBackgroundColor: \"rgba(255, 255, 255, 1)\",\n      // Adjust point background color for better visibility in dark mode\n      pointBorderColor: \"rgba(255, 255, 255, 1)\" // Adjust point border color for better visibility in dark mode\n    }]\n  };\n\n  // Adjust options for better visibility in dark mode\n  const options1 = {\n    scales: {\n      x: {\n        ticks: {\n          color: \"rgba(255, 255, 255, 0.7)\" // Adjust x-axis label color for better visibility in dark mode\n        },\n        grid: {\n          color: \"rgba(255, 255, 255, 0.1)\" // Adjust x-axis grid line color for better visibility in dark mode\n        }\n      },\n      y: {\n        ticks: {\n          color: \"rgba(255, 255, 255, 0.7)\" // Adjust y-axis label color for better visibility in dark mode\n        },\n        grid: {\n          color: \"rgba(255, 255, 255, 0.1)\" // Adjust y-axis grid line color for better visibility in dark mode\n        }\n      }\n    },\n    plugins: {\n      title: {\n        display: true,\n        text: \"Total Charge\",\n        color: \"rgba(255, 255, 255, 0.7)\" // Adjust title color for better visibility in dark mode\n      },\n      legend: {\n        labels: {\n          color: \"rgba(255, 255, 255, 0.7)\" // Adjust legend label color for better visibility in dark mode\n        }\n      },\n      tooltip: {\n        backgroundColor: \"rgba(0, 0, 0, 0.8)\",\n        // Adjust tooltip background color for better visibility in dark mode\n        bodyColor: \"rgba(255, 255, 255, 0.7)\" // Adjust tooltip text color for better visibility in dark mode\n      }\n    }\n  };\n  const generateHistogramData = () => {\n    const minAvgCharge = 0;\n    const maxAvgCharge = 10000;\n    const binWidth = 500;\n    const bins = Array.from({\n      length: Math.ceil((maxAvgCharge - minAvgCharge) / binWidth) + 1\n    }, (_, i) => minAvgCharge + i * binWidth);\n    const frequency = Array(bins.length - 1).fill(0);\n    quarterMetricData.forEach(item => {\n      const binIndex = Math.floor((item.Avg_Charge - minAvgCharge) / binWidth);\n      if (binIndex >= 0 && binIndex < frequency.length) {\n        frequency[binIndex]++;\n      }\n    });\n    const labels = bins.slice(0, -1).map((bin, index) => {\n      const nextBin = bins[index + 1];\n      return `${bin}-${nextBin}`;\n    });\n    return {\n      labels,\n      datasets: [{\n        label: \"Frequency\",\n        data: frequency,\n        backgroundColor: \"rgba(75, 192, 192, 0.6)\"\n      }]\n    };\n  };\n  const lineChartData2 = {\n    labels: monthMetricData.map(item => item.Month),\n    datasets: [{\n      label: \"Elec Charge Perc\",\n      data: monthMetricData.map(item => item.Elec_Charge_Perc),\n      borderColor: \"#FFA500\",\n      backgroundColor: \"transparent\",\n      fill: false\n    }, {\n      label: \"Energy Charge Perc\",\n      data: monthMetricData.map(item => item.Energy_Charge_Perc),\n      borderColor: \"#3e95cd\",\n      backgroundColor: \"transparent\",\n      fill: false\n    }, {\n      label: \"Fixed Charge Perc\",\n      data: monthMetricData.map(item => item.Fixed_Charge_Perc),\n      borderColor: \"#3cba9f\",\n      backgroundColor: \"transparent\",\n      fill: false\n    }, {\n      label: \"Meter Rent Perc\",\n      data: monthMetricData.map(item => item.Meter_Rent_Perc),\n      borderColor: \"#c45850\",\n      backgroundColor: \"transparent\",\n      fill: false\n    }]\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h3\",\n      sx: {\n        marginY: 2\n      },\n      children: \"LWE Analytics\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 7\n    }, this), loading ? /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 3,\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        md: 6,\n        children: /*#__PURE__*/_jsxDEV(Paper, {\n          sx: {\n            padding: 2\n          },\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h6\",\n            children: \"Month on Month Trend of Total Charge\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 190,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Line, {\n            data: lineChartData1\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 193,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        md: 6,\n        children: /*#__PURE__*/_jsxDEV(Paper, {\n          sx: {\n            padding: 2\n          },\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h6\",\n            children: \"Quarter Distribution of Avg Charge\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 198,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Bar, {\n            data: generateHistogramData()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 201,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        md: 6,\n        children: /*#__PURE__*/_jsxDEV(Paper, {\n          sx: {\n            padding: 2\n          },\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h6\",\n            children: \"%Split of Total Charge\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 206,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Line, {\n            data: lineChartData2\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 207,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        md: 6,\n        children: /*#__PURE__*/_jsxDEV(Paper, {\n          sx: {\n            padding: 2\n          },\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h6\",\n            children: \"Top 11 Avg Monthly Charge Quarters\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 212,\n            columnNumber: 15\n          }, this), topQuarters.map(quarter => /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"body1\",\n            children: `Quarter ${quarter.Quarter_ID}: ${quarter.Avg_Charge.toFixed(0)} Rs`\n          }, quarter.Quarter_ID, false, {\n            fileName: _jsxFileName,\n            lineNumber: 216,\n            columnNumber: 17\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        md: 6,\n        children: /*#__PURE__*/_jsxDEV(Paper, {\n          sx: {\n            padding: 2\n          },\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h6\",\n            children: \"Select Quarter\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 226,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Select, {\n            fullWidth: true,\n            value: selectedQuarter,\n            onChange: handleQuarterChange,\n            children: quarterMetricData.map(quarter => /*#__PURE__*/_jsxDEV(MenuItem, {\n              value: quarter.Quarter_ID,\n              children: `Quarter ${quarter.Quarter_ID}`\n            }, quarter.Quarter_ID, false, {\n              fileName: _jsxFileName,\n              lineNumber: 233,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 227,\n            columnNumber: 15\n          }, this), selectedQuarterAvgCharge && /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"body1\",\n            sx: {\n              marginTop: 1\n            },\n            children: [\"Avg Monthly Charge: \", selectedQuarterAvgCharge.toFixed(0)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 240,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 180,\n    columnNumber: 5\n  }, this);\n};\n_s(Dashboard, \"lW9uzJD8nz+SMGjzsEPOxTWEtSw=\");\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useState","useEffect","Chart","ChartJS","registerables","Bar","Line","Container","Typography","Grid","Paper","CircularProgress","Select","MenuItem","axios","jsxDEV","_jsxDEV","register","Dashboard","_s","loading","setLoading","billData","setBillData","quarterMetricData","setQuarterMetricData","monthMetricData","setMonthMetricData","selectedQuarter","setSelectedQuarter","selectedQuarterAvgCharge","setSelectedQuarterAvgCharge","fetchData","response","get","data","bill_data","quarter_metric_data","month_metric_data","console","log","error","handleQuarterChange","event","selectedQuarterId","target","value","selectedQuarterData","find","quarter","Quarter_ID","Avg_Charge","topQuarters","slice","lineChartData1","labels","map","item","Month","datasets","label","Total_Charge","borderColor","backgroundColor","pointBackgroundColor","pointBorderColor","options1","scales","x","ticks","color","grid","y","plugins","title","display","text","legend","tooltip","bodyColor","generateHistogramData","minAvgCharge","maxAvgCharge","binWidth","bins","Array","from","length","Math","ceil","_","i","frequency","fill","forEach","binIndex","floor","bin","index","nextBin","lineChartData2","Elec_Charge_Perc","Energy_Charge_Perc","Fixed_Charge_Perc","Meter_Rent_Perc","children","variant","sx","marginY","fileName","_jsxFileName","lineNumber","columnNumber","container","spacing","xs","md","padding","toFixed","fullWidth","onChange","marginTop","_c","$RefreshReg$"],"sources":["C:/Users/LENOVO/Desktop/Django React Projects/dop/frontend/src/components/Dashboard.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { Chart as ChartJS, registerables } from \"chart.js\";\r\nimport { Bar, Line } from \"react-chartjs-2\";\r\nimport {\r\n  Container,\r\n  Typography,\r\n  Grid,\r\n  Paper,\r\n  CircularProgress,\r\n  Select,\r\n  MenuItem,\r\n} from \"@mui/material\";\r\nimport axios from \"axios\";\r\n\r\nChartJS.register(...registerables);\r\n\r\nconst Dashboard = () => {\r\n  const [loading, setLoading] = useState(true);\r\n  const [billData, setBillData] = useState([]);\r\n  const [quarterMetricData, setQuarterMetricData] = useState([]);\r\n  const [monthMetricData, setMonthMetricData] = useState([]);\r\n  const [selectedQuarter, setSelectedQuarter] = useState(\"\");\r\n  const [selectedQuarterAvgCharge, setSelectedQuarterAvgCharge] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, []);\r\n\r\n  const fetchData = async () => {\r\n    try {\r\n      const response = await axios.get(\"/api/get_data\");\r\n      const data = response.data;\r\n\r\n      setBillData(data.bill_data);\r\n      setQuarterMetricData(data.quarter_metric_data);\r\n      setMonthMetricData(data.month_metric_data);\r\n      setLoading(false);\r\n      console.log(\"Data successfully fetched: \", data);\r\n    } catch (error) {\r\n      console.error(\"Error fetching data:\", error);\r\n    }\r\n  };\r\n\r\n  const handleQuarterChange = (event) => {\r\n    const selectedQuarterId = event.target.value;\r\n    const selectedQuarterData = quarterMetricData.find(\r\n      (quarter) => quarter.Quarter_ID === selectedQuarterId\r\n    );\r\n    setSelectedQuarter(selectedQuarterId);\r\n    setSelectedQuarterAvgCharge(\r\n      selectedQuarterData ? selectedQuarterData.Avg_Charge : \"\"\r\n    );\r\n  };\r\n\r\n  const topQuarters = quarterMetricData.slice(0, 11);\r\n\r\n  const lineChartData1 = {\r\n    labels: monthMetricData.map((item) => item.Month),\r\n    datasets: [\r\n      {\r\n        label: \"Total Charge\",\r\n        data: monthMetricData.map((item) => item.Total_Charge),\r\n        borderColor: \"rgba(75, 192, 192, 1)\", // Adjust border color for better visibility in dark mode\r\n        backgroundColor: \"rgba(75, 192, 192, 0.2)\", // Adjust background color for better visibility in dark mode\r\n        pointBackgroundColor: \"rgba(255, 255, 255, 1)\", // Adjust point background color for better visibility in dark mode\r\n        pointBorderColor: \"rgba(255, 255, 255, 1)\", // Adjust point border color for better visibility in dark mode\r\n      },\r\n    ],\r\n  };\r\n\r\n  // Adjust options for better visibility in dark mode\r\n  const options1 = {\r\n    scales: {\r\n      x: {\r\n        ticks: {\r\n          color: \"rgba(255, 255, 255, 0.7)\", // Adjust x-axis label color for better visibility in dark mode\r\n        },\r\n        grid: {\r\n          color: \"rgba(255, 255, 255, 0.1)\", // Adjust x-axis grid line color for better visibility in dark mode\r\n        },\r\n      },\r\n      y: {\r\n        ticks: {\r\n          color: \"rgba(255, 255, 255, 0.7)\", // Adjust y-axis label color for better visibility in dark mode\r\n        },\r\n        grid: {\r\n          color: \"rgba(255, 255, 255, 0.1)\", // Adjust y-axis grid line color for better visibility in dark mode\r\n        },\r\n      },\r\n    },\r\n    plugins: {\r\n      title: {\r\n        display: true,\r\n        text: \"Total Charge\",\r\n        color: \"rgba(255, 255, 255, 0.7)\", // Adjust title color for better visibility in dark mode\r\n      },\r\n      legend: {\r\n        labels: {\r\n          color: \"rgba(255, 255, 255, 0.7)\", // Adjust legend label color for better visibility in dark mode\r\n        },\r\n      },\r\n      tooltip: {\r\n        backgroundColor: \"rgba(0, 0, 0, 0.8)\", // Adjust tooltip background color for better visibility in dark mode\r\n        bodyColor: \"rgba(255, 255, 255, 0.7)\", // Adjust tooltip text color for better visibility in dark mode\r\n      },\r\n    },\r\n  };\r\n\r\n  const generateHistogramData = () => {\r\n    const minAvgCharge = 0;\r\n    const maxAvgCharge = 10000;\r\n    const binWidth = 500;\r\n\r\n    const bins = Array.from(\r\n      { length: Math.ceil((maxAvgCharge - minAvgCharge) / binWidth) + 1 },\r\n      (_, i) => minAvgCharge + i * binWidth\r\n    );\r\n\r\n    const frequency = Array(bins.length - 1).fill(0);\r\n\r\n    quarterMetricData.forEach((item) => {\r\n      const binIndex = Math.floor((item.Avg_Charge - minAvgCharge) / binWidth);\r\n      if (binIndex >= 0 && binIndex < frequency.length) {\r\n        frequency[binIndex]++;\r\n      }\r\n    });\r\n\r\n    const labels = bins.slice(0, -1).map((bin, index) => {\r\n      const nextBin = bins[index + 1];\r\n      return `${bin}-${nextBin}`;\r\n    });\r\n\r\n    return {\r\n      labels,\r\n      datasets: [\r\n        {\r\n          label: \"Frequency\",\r\n          data: frequency,\r\n          backgroundColor: \"rgba(75, 192, 192, 0.6)\",\r\n        },\r\n      ],\r\n    };\r\n  };\r\n\r\n  const lineChartData2 = {\r\n    labels: monthMetricData.map((item) => item.Month),\r\n    datasets: [\r\n      {\r\n        label: \"Elec Charge Perc\",\r\n        data: monthMetricData.map((item) => item.Elec_Charge_Perc),\r\n        borderColor: \"#FFA500\",\r\n        backgroundColor: \"transparent\",\r\n        fill: false,\r\n      },\r\n      {\r\n        label: \"Energy Charge Perc\",\r\n        data: monthMetricData.map((item) => item.Energy_Charge_Perc),\r\n        borderColor: \"#3e95cd\",\r\n        backgroundColor: \"transparent\",\r\n        fill: false,\r\n      },\r\n      {\r\n        label: \"Fixed Charge Perc\",\r\n        data: monthMetricData.map((item) => item.Fixed_Charge_Perc),\r\n        borderColor: \"#3cba9f\",\r\n        backgroundColor: \"transparent\",\r\n        fill: false,\r\n      },\r\n      {\r\n        label: \"Meter Rent Perc\",\r\n        data: monthMetricData.map((item) => item.Meter_Rent_Perc),\r\n        borderColor: \"#c45850\",\r\n        backgroundColor: \"transparent\",\r\n        fill: false,\r\n      },\r\n    ],\r\n  };\r\n\r\n  return (\r\n    <Container>\r\n      <Typography variant=\"h3\" sx={{ marginY: 2 }}>\r\n        LWE Analytics\r\n      </Typography>\r\n      {loading ? (\r\n        <CircularProgress />\r\n      ) : (\r\n        <Grid container spacing={3}>\r\n          <Grid item xs={12} md={6}>\r\n            <Paper sx={{ padding: 2 }}>\r\n              <Typography variant=\"h6\">\r\n                Month on Month Trend of Total Charge\r\n              </Typography>\r\n              <Line data={lineChartData1} />\r\n            </Paper>\r\n          </Grid>\r\n          <Grid item xs={12} md={6}>\r\n            <Paper sx={{ padding: 2 }}>\r\n              <Typography variant=\"h6\">\r\n                Quarter Distribution of Avg Charge\r\n              </Typography>\r\n              <Bar data={generateHistogramData()} />\r\n            </Paper>\r\n          </Grid>\r\n          <Grid item xs={12} md={6}>\r\n            <Paper sx={{ padding: 2 }}>\r\n              <Typography variant=\"h6\">%Split of Total Charge</Typography>\r\n              <Line data={lineChartData2} />\r\n            </Paper>\r\n          </Grid>\r\n          <Grid item xs={12} md={6}>\r\n            <Paper sx={{ padding: 2 }}>\r\n              <Typography variant=\"h6\">\r\n                Top 11 Avg Monthly Charge Quarters\r\n              </Typography>\r\n              {topQuarters.map((quarter) => (\r\n                <Typography key={quarter.Quarter_ID} variant=\"body1\">\r\n                  {`Quarter ${quarter.Quarter_ID}: ${quarter.Avg_Charge.toFixed(\r\n                    0\r\n                  )} Rs`}\r\n                </Typography>\r\n              ))}\r\n            </Paper>\r\n          </Grid>\r\n          <Grid item xs={12} md={6}>\r\n            <Paper sx={{ padding: 2 }}>\r\n              <Typography variant=\"h6\">Select Quarter</Typography>\r\n              <Select\r\n                fullWidth\r\n                value={selectedQuarter}\r\n                onChange={handleQuarterChange}\r\n              >\r\n                {quarterMetricData.map((quarter) => (\r\n                  <MenuItem\r\n                    key={quarter.Quarter_ID}\r\n                    value={quarter.Quarter_ID}\r\n                  >{`Quarter ${quarter.Quarter_ID}`}</MenuItem>\r\n                ))}\r\n              </Select>\r\n              {selectedQuarterAvgCharge && (\r\n                <Typography variant=\"body1\" sx={{ marginTop: 1 }}>\r\n                  Avg Monthly Charge: {selectedQuarterAvgCharge.toFixed(0)}\r\n                </Typography>\r\n              )}\r\n            </Paper>\r\n          </Grid>\r\n        </Grid>\r\n      )}\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Dashboard;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
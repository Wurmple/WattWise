{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\LENOVO\\\\Desktop\\\\Django React Projects\\\\dop\\\\frontend\\\\src\\\\components\\\\Dashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { Chart as ChartJS, registerables } from \"chart.js\";\nimport { Bar, Line } from \"react-chartjs-2\";\nimport { Container, Typography, Grid, Paper, CircularProgress, Select, MenuItem, makeStyles } from \"@mui/material\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(...registerables);\nconst useStyles = makeStyles(theme => ({\n  paper: {\n    padding: theme.spacing(3),\n    marginBottom: theme.spacing(3)\n  }\n}));\nconst Dashboard = () => {\n  _s();\n  const classes = useStyles();\n  const [loading, setLoading] = useState(true);\n  const [billData, setBillData] = useState([]);\n  const [quarterMetricData, setQuarterMetricData] = useState([]);\n  const [monthMetricData, setMonthMetricData] = useState([]);\n  const [selectedQuarter, setSelectedQuarter] = useState(\"\");\n  const [selectedQuarterAvgCharge, setSelectedQuarterAvgCharge] = useState(\"\");\n  useEffect(() => {\n    fetchData();\n  }, []);\n  const fetchData = async () => {\n    try {\n      const response = await axios.get(\"/api/get_data\");\n      const data = response.data;\n      setBillData(data.bill_data);\n      setQuarterMetricData(data.quarter_metric_data);\n      setMonthMetricData(data.month_metric_data);\n      setLoading(false);\n      console.log(\"Data successfully fetched: \", data);\n    } catch (error) {\n      console.error(\"Error fetching data:\", error);\n    }\n  };\n  const handleQuarterChange = event => {\n    const selectedQuarterId = event.target.value;\n    const selectedQuarterData = quarterMetricData.find(quarter => quarter.Quarter_ID === selectedQuarterId);\n    setSelectedQuarter(selectedQuarterId);\n    setSelectedQuarterAvgCharge(selectedQuarterData ? selectedQuarterData.Avg_Charge : \"\");\n  };\n  const topQuarters = quarterMetricData.slice(0, 11);\n  const lineChartData1 = {\n    labels: monthMetricData.map(item => item.Month),\n    datasets: [{\n      label: \"Total Charge\",\n      data: monthMetricData.map(item => item.Total_Charge),\n      borderColor: \"rgb(53, 162, 235)\",\n      backgroundColor: \"rgba(53, 162, 235, 0.5)\"\n    }]\n  };\n  const generateHistogramData = () => {\n    const minAvgCharge = 0;\n    const maxAvgCharge = 10000;\n    const binWidth = 500;\n    const bins = Array.from({\n      length: Math.ceil((maxAvgCharge - minAvgCharge) / binWidth) + 1\n    }, (_, i) => minAvgCharge + i * binWidth);\n    const frequency = Array(bins.length - 1).fill(0);\n    quarterMetricData.forEach(item => {\n      const binIndex = Math.floor((item.Avg_Charge - minAvgCharge) / binWidth);\n      if (binIndex >= 0 && binIndex < frequency.length) {\n        frequency[binIndex]++;\n      }\n    });\n    const labels = bins.slice(0, -1).map((bin, index) => {\n      const nextBin = bins[index + 1];\n      return `${bin}-${nextBin}`;\n    });\n    return {\n      labels,\n      datasets: [{\n        label: \"Frequency\",\n        data: frequency,\n        backgroundColor: \"rgba(75, 192, 192, 0.6)\"\n      }]\n    };\n  };\n  const lineChartData2 = {\n    labels: monthMetricData.map(item => item.Month),\n    datasets: [{\n      label: \"Elec Charge Perc\",\n      data: monthMetricData.map(item => item.Elec_Charge_Perc),\n      borderColor: \"#FFA500\",\n      backgroundColor: \"transparent\",\n      fill: false\n    }, {\n      label: \"Energy Charge Perc\",\n      data: monthMetricData.map(item => item.Energy_Charge_Perc),\n      borderColor: \"#3e95cd\",\n      backgroundColor: \"transparent\",\n      fill: false\n    }, {\n      label: \"Fixed Charge Perc\",\n      data: monthMetricData.map(item => item.Fixed_Charge_Perc),\n      borderColor: \"#3cba9f\",\n      backgroundColor: \"transparent\",\n      fill: false\n    }, {\n      label: \"Meter Rent Perc\",\n      data: monthMetricData.map(item => item.Meter_Rent_Perc),\n      borderColor: \"#c45850\",\n      backgroundColor: \"transparent\",\n      fill: false\n    }]\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h3\",\n      gutterBottom: true,\n      children: \"Data Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 7\n    }, this), loading ? /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 3,\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        md: 6,\n        children: /*#__PURE__*/_jsxDEV(Paper, {\n          className: classes.paper,\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h6\",\n            children: \"Month on Month Trend of Total Charge\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Line, {\n            data: lineChartData1\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 163,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        md: 6,\n        children: /*#__PURE__*/_jsxDEV(Paper, {\n          className: classes.paper,\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h6\",\n            children: \"Quarter Distribution of Avg Charge\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 168,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Bar, {\n            data: generateHistogramData()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 171,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        md: 6,\n        children: /*#__PURE__*/_jsxDEV(Paper, {\n          className: classes.paper,\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h6\",\n            children: \"%Split of Total Charge\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 176,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Line, {\n            data: lineChartData2\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 177,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        md: 6,\n        children: /*#__PURE__*/_jsxDEV(Paper, {\n          className: classes.paper,\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h6\",\n            children: \"Top 11 Avg Charge Quarters\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 182,\n            columnNumber: 15\n          }, this), topQuarters.map(quarter => /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"body1\",\n            children: `Quarter ${quarter.Quarter_ID}: Avg Charge - ${quarter.Avg_Charge}`\n          }, quarter.Quarter_ID, false, {\n            fileName: _jsxFileName,\n            lineNumber: 184,\n            columnNumber: 17\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        md: 6,\n        children: /*#__PURE__*/_jsxDEV(Paper, {\n          className: classes.paper,\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h6\",\n            children: \"Select Quarter\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 193,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Select, {\n            fullWidth: true,\n            value: selectedQuarter,\n            onChange: handleQuarterChange,\n            children: quarterMetricData.map(quarter => /*#__PURE__*/_jsxDEV(MenuItem, {\n              value: quarter.Quarter_ID,\n              children: `Quarter ${quarter.Quarter_ID}`\n            }, quarter.Quarter_ID, false, {\n              fileName: _jsxFileName,\n              lineNumber: 200,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 194,\n            columnNumber: 15\n          }, this), selectedQuarterAvgCharge && /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"body1\",\n            sx: {\n              marginTop: 1\n            },\n            children: [\"Avg Charge: \", selectedQuarterAvgCharge]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 207,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 150,\n    columnNumber: 5\n  }, this);\n};\n_s(Dashboard, \"1b8MhS4gpGIZkkiCPYI8HH2LN6s=\", false, function () {\n  return [useStyles];\n});\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useState","useEffect","Chart","ChartJS","registerables","Bar","Line","Container","Typography","Grid","Paper","CircularProgress","Select","MenuItem","makeStyles","axios","jsxDEV","_jsxDEV","register","useStyles","theme","paper","padding","spacing","marginBottom","Dashboard","_s","classes","loading","setLoading","billData","setBillData","quarterMetricData","setQuarterMetricData","monthMetricData","setMonthMetricData","selectedQuarter","setSelectedQuarter","selectedQuarterAvgCharge","setSelectedQuarterAvgCharge","fetchData","response","get","data","bill_data","quarter_metric_data","month_metric_data","console","log","error","handleQuarterChange","event","selectedQuarterId","target","value","selectedQuarterData","find","quarter","Quarter_ID","Avg_Charge","topQuarters","slice","lineChartData1","labels","map","item","Month","datasets","label","Total_Charge","borderColor","backgroundColor","generateHistogramData","minAvgCharge","maxAvgCharge","binWidth","bins","Array","from","length","Math","ceil","_","i","frequency","fill","forEach","binIndex","floor","bin","index","nextBin","lineChartData2","Elec_Charge_Perc","Energy_Charge_Perc","Fixed_Charge_Perc","Meter_Rent_Perc","children","variant","gutterBottom","fileName","_jsxFileName","lineNumber","columnNumber","container","xs","md","className","fullWidth","onChange","sx","marginTop","_c","$RefreshReg$"],"sources":["C:/Users/LENOVO/Desktop/Django React Projects/dop/frontend/src/components/Dashboard.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { Chart as ChartJS, registerables } from \"chart.js\";\r\nimport { Bar, Line } from \"react-chartjs-2\";\r\nimport {\r\n  Container,\r\n  Typography,\r\n  Grid,\r\n  Paper,\r\n  CircularProgress,\r\n  Select,\r\n  MenuItem,\r\n  makeStyles,\r\n} from \"@mui/material\";\r\nimport axios from \"axios\";\r\n\r\nChartJS.register(...registerables);\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    padding: theme.spacing(3),\r\n    marginBottom: theme.spacing(3),\r\n  },\r\n}));\r\n\r\nconst Dashboard = () => {\r\n  const classes = useStyles();\r\n\r\n  const [loading, setLoading] = useState(true);\r\n  const [billData, setBillData] = useState([]);\r\n  const [quarterMetricData, setQuarterMetricData] = useState([]);\r\n  const [monthMetricData, setMonthMetricData] = useState([]);\r\n  const [selectedQuarter, setSelectedQuarter] = useState(\"\");\r\n  const [selectedQuarterAvgCharge, setSelectedQuarterAvgCharge] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, []);\r\n\r\n  const fetchData = async () => {\r\n    try {\r\n      const response = await axios.get(\"/api/get_data\");\r\n      const data = response.data;\r\n\r\n      setBillData(data.bill_data);\r\n      setQuarterMetricData(data.quarter_metric_data);\r\n      setMonthMetricData(data.month_metric_data);\r\n      setLoading(false);\r\n      console.log(\"Data successfully fetched: \", data);\r\n    } catch (error) {\r\n      console.error(\"Error fetching data:\", error);\r\n    }\r\n  };\r\n\r\n  const handleQuarterChange = (event) => {\r\n    const selectedQuarterId = event.target.value;\r\n    const selectedQuarterData = quarterMetricData.find(\r\n      (quarter) => quarter.Quarter_ID === selectedQuarterId\r\n    );\r\n    setSelectedQuarter(selectedQuarterId);\r\n    setSelectedQuarterAvgCharge(\r\n      selectedQuarterData ? selectedQuarterData.Avg_Charge : \"\"\r\n    );\r\n  };\r\n\r\n  const topQuarters = quarterMetricData.slice(0, 11);\r\n\r\n  const lineChartData1 = {\r\n    labels: monthMetricData.map((item) => item.Month),\r\n    datasets: [\r\n      {\r\n        label: \"Total Charge\",\r\n        data: monthMetricData.map((item) => item.Total_Charge),\r\n        borderColor: \"rgb(53, 162, 235)\",\r\n        backgroundColor: \"rgba(53, 162, 235, 0.5)\",\r\n      },\r\n    ],\r\n  };\r\n\r\n  const generateHistogramData = () => {\r\n    const minAvgCharge = 0;\r\n    const maxAvgCharge = 10000;\r\n    const binWidth = 500;\r\n\r\n    const bins = Array.from(\r\n      { length: Math.ceil((maxAvgCharge - minAvgCharge) / binWidth) + 1 },\r\n      (_, i) => minAvgCharge + i * binWidth\r\n    );\r\n\r\n    const frequency = Array(bins.length - 1).fill(0);\r\n\r\n    quarterMetricData.forEach((item) => {\r\n      const binIndex = Math.floor((item.Avg_Charge - minAvgCharge) / binWidth);\r\n      if (binIndex >= 0 && binIndex < frequency.length) {\r\n        frequency[binIndex]++;\r\n      }\r\n    });\r\n\r\n    const labels = bins.slice(0, -1).map((bin, index) => {\r\n      const nextBin = bins[index + 1];\r\n      return `${bin}-${nextBin}`;\r\n    });\r\n\r\n    return {\r\n      labels,\r\n      datasets: [\r\n        {\r\n          label: \"Frequency\",\r\n          data: frequency,\r\n          backgroundColor: \"rgba(75, 192, 192, 0.6)\",\r\n        },\r\n      ],\r\n    };\r\n  };\r\n\r\n  const lineChartData2 = {\r\n    labels: monthMetricData.map((item) => item.Month),\r\n    datasets: [\r\n      {\r\n        label: \"Elec Charge Perc\",\r\n        data: monthMetricData.map((item) => item.Elec_Charge_Perc),\r\n        borderColor: \"#FFA500\",\r\n        backgroundColor: \"transparent\",\r\n        fill: false,\r\n      },\r\n      {\r\n        label: \"Energy Charge Perc\",\r\n        data: monthMetricData.map((item) => item.Energy_Charge_Perc),\r\n        borderColor: \"#3e95cd\",\r\n        backgroundColor: \"transparent\",\r\n        fill: false,\r\n      },\r\n      {\r\n        label: \"Fixed Charge Perc\",\r\n        data: monthMetricData.map((item) => item.Fixed_Charge_Perc),\r\n        borderColor: \"#3cba9f\",\r\n        backgroundColor: \"transparent\",\r\n        fill: false,\r\n      },\r\n      {\r\n        label: \"Meter Rent Perc\",\r\n        data: monthMetricData.map((item) => item.Meter_Rent_Perc),\r\n        borderColor: \"#c45850\",\r\n        backgroundColor: \"transparent\",\r\n        fill: false,\r\n      },\r\n    ],\r\n  };\r\n\r\n  return (\r\n    <Container>\r\n      <Typography variant=\"h3\" gutterBottom>\r\n        Data Dashboard\r\n      </Typography>\r\n      {loading ? (\r\n        <CircularProgress />\r\n      ) : (\r\n        <Grid container spacing={3}>\r\n          <Grid item xs={12} md={6}>\r\n            <Paper className={classes.paper}>\r\n              <Typography variant=\"h6\">\r\n                Month on Month Trend of Total Charge\r\n              </Typography>\r\n              <Line data={lineChartData1} />\r\n            </Paper>\r\n          </Grid>\r\n          <Grid item xs={12} md={6}>\r\n            <Paper className={classes.paper}>\r\n              <Typography variant=\"h6\">\r\n                Quarter Distribution of Avg Charge\r\n              </Typography>\r\n              <Bar data={generateHistogramData()} />\r\n            </Paper>\r\n          </Grid>\r\n          <Grid item xs={12} md={6}>\r\n            <Paper className={classes.paper}>\r\n              <Typography variant=\"h6\">%Split of Total Charge</Typography>\r\n              <Line data={lineChartData2} />\r\n            </Paper>\r\n          </Grid>\r\n          <Grid item xs={12} md={6}>\r\n            <Paper className={classes.paper}>\r\n              <Typography variant=\"h6\">Top 11 Avg Charge Quarters</Typography>\r\n              {topQuarters.map((quarter) => (\r\n                <Typography\r\n                  key={quarter.Quarter_ID}\r\n                  variant=\"body1\"\r\n                >{`Quarter ${quarter.Quarter_ID}: Avg Charge - ${quarter.Avg_Charge}`}</Typography>\r\n              ))}\r\n            </Paper>\r\n          </Grid>\r\n          <Grid item xs={12} md={6}>\r\n            <Paper className={classes.paper}>\r\n              <Typography variant=\"h6\">Select Quarter</Typography>\r\n              <Select\r\n                fullWidth\r\n                value={selectedQuarter}\r\n                onChange={handleQuarterChange}\r\n              >\r\n                {quarterMetricData.map((quarter) => (\r\n                  <MenuItem\r\n                    key={quarter.Quarter_ID}\r\n                    value={quarter.Quarter_ID}\r\n                  >{`Quarter ${quarter.Quarter_ID}`}</MenuItem>\r\n                ))}\r\n              </Select>\r\n              {selectedQuarterAvgCharge && (\r\n                <Typography variant=\"body1\" sx={{ marginTop: 1 }}>\r\n                  Avg Charge: {selectedQuarterAvgCharge}\r\n                </Typography>\r\n              )}\r\n            </Paper>\r\n          </Grid>\r\n        </Grid>\r\n      )}\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Dashboard;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\LENOVO\\\\Desktop\\\\Django React Projects\\\\dop\\\\frontend\\\\src\\\\components\\\\Dashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from 'chart.js';\nimport { Line } from 'react-chartjs-2';\nimport { Container, Typography, Grid, Paper, Select, MenuItem, CircularProgress } from '@mui/material';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\nconst options = {\n  responsive: true,\n  plugins: {\n    legend: {\n      position: 'top'\n    },\n    title: {\n      display: true,\n      text: 'Chart.js Line Chart'\n    }\n  }\n};\nconst Dashboard = () => {\n  _s();\n  const [loading, setLoading] = useState(true);\n  const [billData, setBillData] = useState([]);\n  const [quarterMetricData, setQuarterMetricData] = useState([]);\n  const [monthMetricData, setMonthMetricData] = useState([]);\n  useEffect(() => {\n    fetchData();\n  }, []);\n  const fetchData = async () => {\n    try {\n      const response = await fetch('/api/get_data');\n      const data = await response.json();\n      setBillData(data.bill_data);\n      setQuarterMetricData(data.quarter_metric_data);\n      setMonthMetricData(data.month_metric_data);\n      setLoading(false);\n      console.log('Data successfully fetched: ', data);\n    } catch (error) {\n      console.error('Error fetching data:', error);\n    }\n  };\n  const generateHistogramData = () => {\n    const bins = Array.from({\n      length: 11\n    }, (_, i) => i * 1000); // Define bins from 0 to 10000 with bin width as 1000\n    const frequency = Array(10).fill(0); // Initialize frequency array\n\n    // Calculate the frequency of quarters falling into each bin\n    quarterMetricData.forEach(item => {\n      const binIndex = Math.floor(item.Avg_Charge / 1000); // Determine the bin index for the current Avg_Charge\n      frequency[binIndex]++;\n    });\n    return {\n      labels: bins.map((bin, index) => `${bin}-${bin + 1000}`),\n      // Labels for each bin range\n      datasets: [{\n        label: 'Frequency',\n        data: frequency,\n        backgroundColor: 'rgba(75, 192, 192, 0.6)'\n      }]\n    };\n  };\n\n  // Dyamic data for graphs\n  const lineChartData = {\n    labels: monthMetricData.map(item => item.Month),\n    // x-axis labels\n    datasets: [{\n      label: 'Total Charge',\n      // dataset label\n      data: monthMetricData.map(item => item.Total_Charge),\n      // y-axis data\n      borderColor: 'rgb(53, 162, 235)',\n      // border color\n      backgroundColor: 'rgba(53, 162, 235, 0.5)' // background color\n    }]\n  };\n  const barChartData = {\n    // ...\n  };\n  const doughnutChartData = {\n    // ...\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h3\",\n      gutterBottom: true,\n      children: \"Data Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this), loading ? /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 3,\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        children: /*#__PURE__*/_jsxDEV(Paper, {\n          sx: {\n            p: 2\n          },\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h6\",\n            children: \"Month on Month Trend of Total Charge\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Line, {\n            data: lineChartData\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 107,\n    columnNumber: 5\n  }, this);\n};\n_s(Dashboard, \"k2KC0GWNXzAcN5BFm5ziShQ9OUc=\");\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useState","useEffect","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","Line","Container","Typography","Grid","Paper","Select","MenuItem","CircularProgress","jsxDEV","_jsxDEV","register","options","responsive","plugins","legend","position","title","display","text","Dashboard","_s","loading","setLoading","billData","setBillData","quarterMetricData","setQuarterMetricData","monthMetricData","setMonthMetricData","fetchData","response","fetch","data","json","bill_data","quarter_metric_data","month_metric_data","console","log","error","generateHistogramData","bins","Array","from","length","_","i","frequency","fill","forEach","item","binIndex","Math","floor","Avg_Charge","labels","map","bin","index","datasets","label","backgroundColor","lineChartData","Month","Total_Charge","borderColor","barChartData","doughnutChartData","children","variant","gutterBottom","fileName","_jsxFileName","lineNumber","columnNumber","container","spacing","xs","sx","p","_c","$RefreshReg$"],"sources":["C:/Users/LENOVO/Desktop/Django React Projects/dop/frontend/src/components/Dashboard.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport {\r\n  Chart as ChartJS,\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n} from 'chart.js';\r\nimport { Line } from 'react-chartjs-2';\r\nimport { Container, Typography, Grid, Paper, Select, MenuItem, CircularProgress } from '@mui/material';\r\n\r\nChartJS.register(\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend\r\n);\r\n\r\nconst options = {\r\n  responsive: true,\r\n  plugins: {\r\n    legend: {\r\n      position: 'top',\r\n    },\r\n    title: {\r\n      display: true,\r\n      text: 'Chart.js Line Chart',\r\n    },\r\n  },\r\n};\r\n\r\nconst Dashboard = () => {\r\n  const [loading, setLoading] = useState(true);\r\n  const [billData, setBillData] = useState([]);\r\n  const [quarterMetricData, setQuarterMetricData] = useState([]);\r\n  const [monthMetricData, setMonthMetricData] = useState([]);\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, []);\r\n\r\n  const fetchData = async () => {\r\n    try {\r\n      const response = await fetch('/api/get_data');\r\n      const data = await response.json();\r\n\r\n      setBillData(data.bill_data);\r\n      setQuarterMetricData(data.quarter_metric_data);\r\n      setMonthMetricData(data.month_metric_data);\r\n      setLoading(false);\r\n      console.log('Data successfully fetched: ', data)\r\n    } catch (error) {\r\n      console.error('Error fetching data:', error);\r\n    }\r\n  };\r\n\r\n  const generateHistogramData = () => {\r\n    const bins = Array.from({ length: 11 }, (_, i) => i * 1000); // Define bins from 0 to 10000 with bin width as 1000\r\n    const frequency = Array(10).fill(0); // Initialize frequency array\r\n\r\n    // Calculate the frequency of quarters falling into each bin\r\n    quarterMetricData.forEach(item => {\r\n      const binIndex = Math.floor(item.Avg_Charge / 1000); // Determine the bin index for the current Avg_Charge\r\n      frequency[binIndex]++;\r\n    });\r\n\r\n    return {\r\n      labels: bins.map((bin, index) => `${bin}-${bin + 1000}`), // Labels for each bin range\r\n      datasets: [\r\n        {\r\n          label: 'Frequency',\r\n          data: frequency,\r\n          backgroundColor: 'rgba(75, 192, 192, 0.6)',\r\n        },\r\n      ],\r\n    };\r\n  };\r\n  \r\n  // Dyamic data for graphs\r\n  const lineChartData = {\r\n    labels: monthMetricData.map(item => item.Month), // x-axis labels\r\n    datasets: [\r\n      {\r\n        label: 'Total Charge', // dataset label\r\n        data: monthMetricData.map(item => item.Total_Charge), // y-axis data\r\n        borderColor: 'rgb(53, 162, 235)', // border color\r\n        backgroundColor: 'rgba(53, 162, 235, 0.5)', // background color\r\n      },\r\n    ],\r\n  };\r\n\r\n  const barChartData = {\r\n    // ...\r\n  };\r\n\r\n  const doughnutChartData = {\r\n    // ...\r\n  };\r\n\r\n  return (\r\n    <Container>\r\n      <Typography variant=\"h3\" gutterBottom>Data Dashboard</Typography>\r\n      {loading ? (\r\n        <CircularProgress />\r\n      ) : (\r\n        <Grid container spacing={3}>\r\n          <Grid item xs={12}>\r\n            <Paper sx={{ p: 2 }}>\r\n              <Typography variant=\"h6\">Month on Month Trend of Total Charge</Typography>\r\n              <Line data={lineChartData} />\r\n            </Paper>\r\n          </Grid>\r\n        </Grid>\r\n      )}\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Dashboard;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}